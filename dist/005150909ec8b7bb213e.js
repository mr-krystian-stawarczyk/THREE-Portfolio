import"./style.css";import*as THREE from"three";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import*as dat from"dat.gui";const textureLoader=new THREE.TextureLoader,normalTexture=textureLoader.load("/textures/NormalMap.png"),canvas=document.querySelector("canvas.webgl"),scene=new THREE.Scene,geometry=new THREE.SphereBufferGeometry(.5,64,64),material=new THREE.MeshStandardMaterial;material.metalness=.5,material.roughness=.2,material.normalMap=normalTexture,material.color=new THREE.Color(2697513);const sphere=new THREE.Mesh(geometry,material);scene.add(sphere);const pointLight1=new THREE.PointLight(16777215,.1);pointLight1.position.x=2,pointLight1.position.y=3,pointLight1.position.z=4,pointLight1.intensity=0,scene.add(pointLight1);const pointLight2=new THREE.PointLight(9373,.1);pointLight2.position.x=3,pointLight2.position.y=2.3,pointLight2.position.z=-1.46,pointLight2.intensity=3.13,scene.add(pointLight2);const pointLight3=new THREE.PointLight(16727808,.1);pointLight3.position.x=-3.4,pointLight3.position.y=-2,pointLight3.position.z=-.03,pointLight3.intensity=1.5,scene.add(pointLight3);const sizes={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{sizes.width=window.innerWidth,sizes.height=window.innerHeight,camera.aspect=sizes.width/sizes.height,camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const camera=new THREE.PerspectiveCamera(75,sizes.width/sizes.height,.1,100);camera.position.x=0,camera.position.y=0,camera.position.z=2,scene.add(camera);const renderer=new THREE.WebGLRenderer({canvas,alpha:!0});renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),document.addEventListener("mousemove",onDocumentMouseMove);let mouseX=0,mouseY=0,targetX=0,targetY=0;const windowHalfX=window.innerWidth/2,windowHalfY=window.innerHeight/2;function onDocumentMouseMove(t){mouseX=t.clientX-windowHalfX,mouseY=t.clientY-windowHalfY}const updateSphere=t=>{sphere.position.y=.001*window.scrollY};window.addEventListener("scroll",updateSphere);const clock=new THREE.Clock,tick=()=>{targetX=.001*mouseX,targetY=.001*mouseY;const t=clock.getElapsedTime();sphere.rotation.y=.5*t,sphere.rotation.y+=.5*(targetX-sphere.rotation.y),sphere.rotation.x+=.5*(targetY-sphere.rotation.x),sphere.position.z+=-1*(targetY-sphere.rotation.x),renderer.render(scene,camera),window.requestAnimationFrame(tick)};tick();class TypeWriter{constructor(t,e,i=3e3){this.txtElement=t,this.words=e,this.txt="",this.wordIndex=0,this.wait=parseInt(i,10),this.type(),this.isDeleting=!1}type(){const t=this.wordIndex%this.words.length,e=this.words[t];this.isDeleting?this.txt=e.substring(0,this.txt.length-1):this.txt=e.substring(0,this.txt.length+1),this.txtElement.innerHTML=`<span class="txt">${this.txt}</span>`;let i=300;this.isDeleting&&(i/=2),this.isDeleting||this.txt!==e?this.isDeleting&&""===this.txt&&(this.isDeleting=!1,this.wordIndex++,i=500):(i=this.wait,this.isDeleting=!0),setTimeout((()=>this.type()),i)}}function init(){const t=document.querySelector(".txt-type"),e=JSON.parse(t.getAttribute("data-words")),i=t.getAttribute("data-wait");new TypeWriter(t,e,i)}document.addEventListener("DOMContentLoaded",init);